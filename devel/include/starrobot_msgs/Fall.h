// Generated by gencpp from file starrobot_msgs/Fall.msg
// DO NOT EDIT!


#ifndef STARROBOT_MSGS_MESSAGE_FALL_H
#define STARROBOT_MSGS_MESSAGE_FALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace starrobot_msgs
{
template <class ContainerAllocator>
struct Fall_
{
  typedef Fall_<ContainerAllocator> Type;

  Fall_()
    : fall1(false)
    , fall2(false)
    , fall3(false)
    , fall4(false)  {
    }
  Fall_(const ContainerAllocator& _alloc)
    : fall1(false)
    , fall2(false)
    , fall3(false)
    , fall4(false)  {
  (void)_alloc;
    }



   typedef uint8_t _fall1_type;
  _fall1_type fall1;

   typedef uint8_t _fall2_type;
  _fall2_type fall2;

   typedef uint8_t _fall3_type;
  _fall3_type fall3;

   typedef uint8_t _fall4_type;
  _fall4_type fall4;





  typedef boost::shared_ptr< ::starrobot_msgs::Fall_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::starrobot_msgs::Fall_<ContainerAllocator> const> ConstPtr;

}; // struct Fall_

typedef ::starrobot_msgs::Fall_<std::allocator<void> > Fall;

typedef boost::shared_ptr< ::starrobot_msgs::Fall > FallPtr;
typedef boost::shared_ptr< ::starrobot_msgs::Fall const> FallConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::starrobot_msgs::Fall_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::starrobot_msgs::Fall_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace starrobot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'starrobot_msgs': ['/home/star/starrobot_ws/src/starrobot/starrobot_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::starrobot_msgs::Fall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::starrobot_msgs::Fall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::starrobot_msgs::Fall_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::starrobot_msgs::Fall_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::starrobot_msgs::Fall_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::starrobot_msgs::Fall_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::starrobot_msgs::Fall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec4daf7144d18cc51c5e99829b72588d";
  }

  static const char* value(const ::starrobot_msgs::Fall_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec4daf7144d18cc5ULL;
  static const uint64_t static_value2 = 0x1c5e99829b72588dULL;
};

template<class ContainerAllocator>
struct DataType< ::starrobot_msgs::Fall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "starrobot_msgs/Fall";
  }

  static const char* value(const ::starrobot_msgs::Fall_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::starrobot_msgs::Fall_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool fall1\n\
bool fall2\n\
bool fall3\n\
bool fall4\n\
";
  }

  static const char* value(const ::starrobot_msgs::Fall_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::starrobot_msgs::Fall_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fall1);
      stream.next(m.fall2);
      stream.next(m.fall3);
      stream.next(m.fall4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fall_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::starrobot_msgs::Fall_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::starrobot_msgs::Fall_<ContainerAllocator>& v)
  {
    s << indent << "fall1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fall1);
    s << indent << "fall2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fall2);
    s << indent << "fall3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fall3);
    s << indent << "fall4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fall4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STARROBOT_MSGS_MESSAGE_FALL_H
